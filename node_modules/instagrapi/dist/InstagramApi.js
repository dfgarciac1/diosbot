"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.InstagramApi = void 0;
var Request_1 = require("./Request");
var utils_1 = require("./utils");
var InstagramApi = (function () {
    function InstagramApi() {
    }
    InstagramApi.getProfile = function (username) {
        return __awaiter(this, void 0, void 0, function () {
            var data, user, profile, error_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4, Request_1.Request.api(username)];
                    case 1:
                        data = _a.sent();
                        user = data.graphql.user;
                        profile = {
                            username: user.username,
                            image: {
                                standard: user.profile_pic_url,
                                hd: user.profile_pic_url_hd
                            },
                            qtyPosts: user.edge_owner_to_timeline_media.count,
                            followers: user.edge_followed_by.count,
                            followed: user.edge_follow.count,
                            name: user.full_name,
                            biography: user.biography,
                            externalUrl: user.external_url,
                            isBusiness: user.is_business_account,
                            isVerified: user.is_verified,
                            isPrivate: user.is_private
                        };
                        return [2, profile];
                    case 2:
                        error_1 = _a.sent();
                        console.error('ERROR-GET-PROFILE ->', error_1.message);
                        throw error_1;
                    case 3: return [2];
                }
            });
        });
    };
    InstagramApi.getLastPosts = function (username) {
        return __awaiter(this, void 0, void 0, function () {
            var data, edges, lastPosts, error_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4, Request_1.Request.api(username)];
                    case 1:
                        data = _a.sent();
                        edges = data.graphql.user.edge_owner_to_timeline_media.edges;
                        lastPosts = edges.map(function (_a) {
                            var media = _a.node;
                            return ({
                                postUrl: utils_1.Utils.getPostUrl(media.shortcode),
                                image: media.display_url,
                                video: media.is_video
                                    ? {
                                        url: media.video_url,
                                        views: media === null || media === void 0 ? void 0 : media.video_view_count
                                    }
                                    : null,
                                content: utils_1.Utils.getCaption(media),
                                likes: media.edge_liked_by.count,
                                qtyComments: media.edge_media_to_comment.count
                            });
                        });
                        return [2, lastPosts];
                    case 2:
                        error_2 = _a.sent();
                        console.error('ERROR-GET-LAST-POSTS ->', error_2.message);
                        throw error_2;
                    case 3: return [2];
                }
            });
        });
    };
    InstagramApi.getPost = function (postUrl) {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            var data, media_1, children, images, user, commentList, post, error_3;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _b.trys.push([0, 2, , 3]);
                        return [4, Request_1.Request.api(postUrl)];
                    case 1:
                        data = _b.sent();
                        media_1 = data.graphql.shortcode_media;
                        children = ((_a = media_1.edge_sidecar_to_children) === null || _a === void 0 ? void 0 : _a.edges) || [];
                        if (children.length)
                            children.shift();
                        images = media_1.display_resources;
                        user = media_1.owner;
                        commentList = media_1.edge_media_to_parent_comment.edges;
                        post = {
                            postUrl: utils_1.Utils.getPostUrl(media_1.shortcode),
                            image: {
                                standard: images.shift().src,
                                hd: images.pop().src
                            },
                            video: media_1.is_video
                                ? {
                                    url: media_1.video_url,
                                    type: media_1.product_type,
                                    views: media_1.video_view_count,
                                    duration: media_1.video_duration,
                                    hasAudio: media_1.clips_music_attribution_info
                                        ? {
                                            artist: media_1.clips_music_attribution_info.artist_name,
                                            song: media_1.clips_music_attribution_info.song_name
                                        }
                                        : media_1.has_audio
                                }
                                : null,
                            content: utils_1.Utils.getCaption(media_1),
                            likes: media_1.edge_media_preview_like.count,
                            qtyComments: media_1.edge_media_to_parent_comment.count,
                            media: children.map(function (_a) {
                                var sidecar = _a.node;
                                var images = sidecar.display_resources;
                                var taggeds = sidecar.edge_media_to_tagged_user.edges;
                                return {
                                    image: {
                                        standard: images.shift().src,
                                        hd: images.pop().src
                                    },
                                    video: sidecar.is_video
                                        ? {
                                            url: sidecar.video_url,
                                            type: media_1.product_type,
                                            views: sidecar.video_view_count,
                                            duration: media_1.video_duration,
                                            hasAudio: sidecar.has_audio
                                        }
                                        : null,
                                    taggedUsers: taggeds.map(function (_a) {
                                        var tagged = _a.node;
                                        return ({
                                            image: tagged.user.profile_pic_url,
                                            name: tagged.user.full_name,
                                            isVerified: tagged.user.is_verified,
                                            coordinates: {
                                                x: tagged.x,
                                                y: tagged.y
                                            }
                                        });
                                    })
                                };
                            }),
                            author: {
                                username: user.username,
                                image: user.profile_pic_url,
                                qtyPosts: user.edge_owner_to_timeline_media.count,
                                followers: user.edge_followed_by.count,
                                name: user.full_name,
                                isVerified: user.is_verified,
                                isPrivate: user.is_private
                            },
                            lastComments: utils_1.Utils.getComments(commentList),
                            location: media_1.location ? utils_1.Utils.getLocation(media_1.location.address_json) : null,
                            date: utils_1.Utils.msToDate(media_1.taken_at_timestamp)
                        };
                        return [2, post];
                    case 2:
                        error_3 = _b.sent();
                        console.error('ERROR-GET-POST ->', error_3.message);
                        throw error_3;
                    case 3: return [2];
                }
            });
        });
    };
    return InstagramApi;
}());
exports.InstagramApi = InstagramApi;
